{"organizations": [], "uuid": "12db1ed1d26af8dd1ed2ba37b0dae359326853db", "thread": {"social": {"gplus": {"shares": 79}, "pinterest": {"shares": 1}, "vk": {"shares": 2}, "linkedin": {"shares": 44}, "facebook": {"likes": 720, "shares": 720, "comments": 0}, "stumbledupon": {"shares": 1}}, "site_full": "itvision.altervista.org", "main_image": "", "site_section": "http://linuxforlife.disqus.com/latest.rss", "section_title": "IT Vision - Latest Comments", "url": "http://itvision.altervista.org/why.linux.is.not.ready.for.the.desktop.current.html", "country": "US", "title": "Re: Artem S. Tashkinov: Main Linux problems or Why Linux is not (yet) Ready for the Desktop", "performance_score": 7, "site": "altervista.org", "participants_count": 1, "title_full": "Re: Artem S. Tashkinov: Main Linux problems or Why Linux is not (yet) Ready for the Desktop", "spam_score": 0.0, "site_type": "news", "published": "2017-02-07T20:39:00.000+02:00", "replies_count": 0, "uuid": "12db1ed1d26af8dd1ed2ba37b0dae359326853db"}, "author": "Marcin Mikołajczak", "url": "http://itvision.altervista.org/why.linux.is.not.ready.for.the.desktop.current.html", "ord_in_thread": 0, "title": "Re: Artem S. Tashkinov: Main Linux problems or Why Linux is not (yet) Ready for the Desktop", "locations": [], "entities": {"persons": [{"name": "artem s. tashkinov", "sentiment": "none"}, {"name": "neil skrypuch", "sentiment": "none"}, {"name": "kaspersky", "sentiment": "none"}, {"name": "hal", "sentiment": "none"}, {"name": "udev", "sentiment": "none"}, {"name": "torvalds", "sentiment": "none"}, {"name": "xv", "sentiment": "none"}, {"name": "gullible jones", "sentiment": "none"}, {"name": "slashdot", "sentiment": "none"}, {"name": "joe", "sentiment": "none"}, {"name": "xorg", "sentiment": "none"}], "locations": [{"name": "us", "sentiment": "none"}, {"name": "ubuntu", "sentiment": "none"}, {"name": "mesa", "sentiment": "none"}, {"name": "wayland", "sentiment": "none"}, {"name": "mandriva", "sentiment": "none"}], "organizations": [{"name": "pita", "sentiment": "none"}, {"name": "google chrome", "sentiment": "none"}, {"name": "usa linux", "sentiment": "none"}, {"name": "nics", "sentiment": "none"}, {"name": "gtk", "sentiment": "none"}, {"name": "vesa", "sentiment": "none"}, {"name": "vmware/​workstation", "sentiment": "none"}, {"name": "vnc", "sentiment": "none"}, {"name": "kde konsole", "sentiment": "none"}, {"name": "alsa", "sentiment": "none"}, {"name": "nvidia", "sentiment": "none"}, {"name": "aaa", "sentiment": "none"}, {"name": "broadcom", "sentiment": "none"}, {"name": "firefox for linux", "sentiment": "none"}, {"name": "seiko", "sentiment": "none"}, {"name": "asus", "sentiment": "none"}, {"name": "ssh", "sentiment": "none"}, {"name": "ati", "sentiment": "none"}, {"name": "skype", "sentiment": "none"}, {"name": "apple", "sentiment": "none"}, {"name": "microsoft", "sentiment": "none"}, {"name": "fedora", "sentiment": "none"}, {"name": "cleartype", "sentiment": "none"}, {"name": "kde", "sentiment": "none"}, {"name": "gcc", "sentiment": "none"}, {"name": "google", "sentiment": "none"}, {"name": "dell", "sentiment": "none"}, {"name": "gpu", "sentiment": "none"}]}, "highlightText": "", "language": "english", "persons": [], "text": "!! Oftentimes you just cannot use new portable devices in Linux, because proper support for certain features gets impletemented too late and distros pick up this support even later. Laptops/notebooks special buttons and features often don't work (e.g. Fn + F1-F12 combination or special power saving modes). ! Resume after suspend in Linux is unstable and oftentimes doesn't work. ! An insane number of regressions in the Linux kernel, when with every new kernel release some hardware can stop working inexplicably. I have personally reported two serious audio playback regressions, which have been consequently resolved, however most users don't know how to file bugs, how to bisect regressions, how to identify faulty components. Software support : X.org is largely outdated , unsuitable and even very much insecure for modern PCs and applications. No high level, stable, sane (truly forward and backward compatible) and standardized API for developing GUI applications (like core Win32 API - most Windows 95 applications still run fine in Windows 10 - that's 20 years of binary compatibility ). Both GTK and Qt (incompatible GTK versions 1, 2, 3 , 4 and incompatible Qt versions 2, 3, 4, 5 just for the last decade) don't strive to be backwards compatible. ! Keyboard shortcuts handling for people using local keyboard layouts is broken (this bug is now 13(!) years old ). ! X.org doesn't automatically switch between desktop resolutions if you have a full screen application with a custom resolution running - strangely some Linux developers oppose to the whole idea of games on Linux. But since Linux is not a gaming platform and no one is interested in Linux as a gaming platform this problem importance is debatable . Valve has released Steam for Linux and they are now porting their games for Linux - but that's a drop in the bucket. ! X.org doesn't restore gamma (which can be perceived as increased brightness) settings on application exit. If you play Valve/Wine games and experience this problem run `xgamma -1` in a terminal. You can thank me by clicking the ad at the top of the page ;-) ! Scrolling in various applications causes artifacts . ! X.org allows applications to exclusively grab keyboard and mouse input. If such applications misbehave you are left with a system you cannot manage, you cannot even switch to text terminals. ! Keyboard handling in X.org is broken by design - when you have a pop up or an open menu, global keyboard shortcuts/​keybindings don't (GTK) work (QT). It's fixed as for Qt5 - hopefully most Qt4 applications will be ported to Qt5: another keyboard handling issue is that in many situations applications' shortcuts do not work (Qt4) when you have a different than the English US keyboard layout. ! For VM applications keyboard handling is incomplete and passing keypresses to guest OS'es is outright broken . ! X.org architecture is inherently insecure - even if you run a desktop GUI application under a different user in your desktop session, e.g. using sudo and xhost, then that \"foreign\" application can grab any input events and also make screenshots of the entire screen. Adobe Flash Player has numerous problems under Linux (unsupported video acceleration decoding and rendering , video tearing, crashes and frames dropping at 100% CPU usage even on high end systems). In 2012 Adobe announced that Adobe Flash player wouldn't be supported any longer for any browsers other than Google Chrome. Edit 2016 : no, this issue has not been resolved, it's just Adobe Flash Player which is rapidly becoming irrelevant. ! X.org server currently has no means of permanently storing and restoring settings changed by the user (xrender settings, Xv settings, etc.). NVIDIA and ATI proprietary drivers both employ custom utilities for this purpose. !! X.org has no means of providing a tear free experience, it's only available if you're running a compositing window manager in the OpenGL mode with vsync-to-blank enabled. !! X.org is not multithreaded . Certain applications running intensive graphical operations can easily freeze your desktop (a simple easily reproducible example: run Adobe Photoshop 7.0 under Wine, open a big enough image and apply a sophisticated filter - see your graphical session die completely until Photoshop finishes its operation). ! There's currently no way to configure mouse scroll speed/acceleration under X.org. Some mice models scroll erratically under X.org. There's no way to replace/​upgrade/​downgrade X.org graphics drivers on the fly (simply put - to restart X server while retaining a user session and running applications). No true safe mode for the X.org server (likewise for KMS - read below). Misconfiguration and broken drivers can leave you with a non-functional system, where sometimes you cannot access text virtual consoles to rectify the situation (in 2013 it became almost a non-issue since quite often nowadays X.org no longer drives your GPU - the kernel does that via KMS). Adding custom modelines in Linux is a major PITA. X.org totally sucks (IOW doesn't work at all in regard to old applications) when it comes to supporting tiled displays, for instance modern 4K displays (Dell UP3214Q, Dell UP2414Q, ASUS PQ321QE, Seiko TVs and others). This is yet another architectural limitation. !! HiDPI support is pretty much non-existent . At the end of 2016 Ubuntu and System76 announced a collaboration to solve this issue. ! Fast user switching (and also concurrent users' sessions) under X.org works very badly and is implemented as a dirty hack: for every user a new X.org server is started. It's possible to login twice under the same account while not being able to run many applications due to errors caused by concurrent access to the same files. Fast user switching is best implemented in KDE followed by Gnome. \nRelated problems: 1) Concurrently logged in users cannot access the same USB flash drive(s). 2) There are reports that problems exists with configuring audio mixer volume levels. Wayland: !! Wayland works through rasterization of pixels which brings about two very bad critical problems which will never be solved: \nFirstly, forget about performance/bandwidth efficient RDP protocol (it's already implemented but it works by sending the updates of large chunks of the screen, i.e. a lot like old highly inefficient VNC), forget about OpenGL pass through, forget about raw compressed video passthrough. In case you're interested all these features work in Microsoft's RDP . \nSecondly, forget about proper output rotation/scaling/ratio change. !! Applications (GUI toolkits) must implement their own fonts antialiasing - there's no API for setting system wide fonts rendering. What??! Most sane and advanced windowing systems work exactly this way - Windows, Android, Mac OS X. In Wayland all clients (read applications) are totally independent. !! Applications (GUI toolkits) must implement their own DPI scaling. The above issues are actually the result of not having one unified graphical toolkit/API (and Wayland developers will not implement it). Alas, no one is currently working towards making existing toolkits share one common configuration for setting fonts antialiasing, DPI scaling and windows shadowing. At least in theory these issues can be easily solved, in practice we already have three independent toolkits for Wayland (GTK3/Qt5/Enlightenment). !! Applies to the X server/protocol as well: neither X.org, nor Wayland offer a way to extend/modify windows title bars' and File Open/Save dialogs. This is a very powerful feature which can be very useful in many situations. Again it's a result of the fact that there's no unified toolkit and no unified window manager (or protocol). !! Applications (GUI toolkits) must implement their own windows shadowing, because Wayland decorator has no access to applications sub-windows. This issue seems to be resolved . Font rendering (which is implemented via high level GUI libraries) issues: CHECKME : ! White or light-colored fonts antialiasing on dark backgrounds (without Infinality patches which are yet to be included by default by any distro) is horrible. CHECKME : ! ClearType fonts are not properly supported out of the box (for a test I compiled FreeType 2.4.11 with ClearType technology but the results were abysmal). Even though the ClearType font rendering technology is now supported, you have no means to properly configure/tune it. Quite often default fonts look ugly , due to missing good (catered to the LCD screen - subpixel RGB full hinting) default fontconfig settings (this quite unpopular website alone gets over 20% of its visitors seeking to fix bad fonts (rendering) in Linux). Web fonts under Linux often look horrible in old distros. Fonts antialiasing is very difficult to implement properly when not using GTK/Qt libraries (Opera had been struggling with fonts antialiasing for a year before they made it work correctly , Google Chrome had fonts rendering broken for eight months) . (Getting better but we're not yet there) By default most distros come without good or even Windows compatible fonts. Fonts antialiasing settings cannot be applied on-the-fly under many DE . By default most distros disable good fonts antialiasing due to patents - more or less resolved in 2012 (however even in 2016 there are still many distros which forget/refuse to enable SPR in freetype2). The Linux kernel: ! The kernel cannot recover from video , sound and network drivers' crashes (I'm very sorry for drawing a comparison with Windows Vista/7/8 where this feature is implemented and works beautifully in a lot of cases). KMS exclusively grabs video output and disallows VESA graphics modes (thus it's impossible to switch different versions of graphics drivers on the fly). KMS video drivers cannot be unloaded or reloaded. !! KMS has no safe mode : sometimes KMS cannot properly initialize your display and you have a dead system you cannot access at all (a kernel option \"nomodeset\" can save you, but it prevents KMS drivers from working at all - so either you have 80x25 text console or you have a perfectly dead display). Traditional Linux/Unix (ext4/​reiser/​xfs/​jfs/​btrfs/etc.) filesystems can be problematic when being used on mass media storage. File descriptors and network sockets cannot be forcibly closed - it's indeed unsafe to remove USB sticks without unmounting them first as it leads to stale mount points, and in certain cases to oopses and crashes. For the same reason you cannot modify your partitions table and resize/move the root partition on the fly. In most cases kernel crashes (= panics) are invisible if you are running an X session. Moreover KMS prevents the kernel from switching to plain 640x480 or 80x25 (text) VGA modes to print error messages. Very incomplete hardware sensors support, for instance, hwinfo32/64 detects and shows ten hardware sensors sources on my average desktop PC and over 50 sensors, whilst lm-sensors detect and present just four sources and 20 sensors. This situation is even worse on laptops - sometimes the only readings you get from lm-sensors are cpu cores' temperatures. !! A great number (sometimes up to a hundred) of very serious regressions every kernel release due to missing QC/QA. Even \"stable\" x.y.Z kernel updates sometimes have serious regressions. !! The Linux kernel is extremely difficult and cumbersome to debug even for the people who develop it. Under some circumstances the system or X.org's GUI may become very slow and unresponsive due to various problems with video acceleration or lack of it and also due to notorious bug 12309 - it's ostensibly fixed but some people still experience it). This bug can be easily reproduced under Android (which employs the Linux kernel) even in 2016: run any disk intensive application (e.g. under any Android terminal 'cat /dev/zero > /sdcard/testfile' ) and enjoy total UI unresponsiveness. !! Critical bug reports filed against the Linux kernel often get zero attention and may linger for years before being noticed and resolved. Posts to LKML oftentimes get lost if the respective developer is not attentive or busy with his own life. Problems stemming from the vast number of Linux distributions: ! No unified configuration system for computer settings, devices and system services. E.g. distro A sets up networking using these utilities, outputting certain settings residing in certain file system locations, distro B sets up everything differently. This drives most users mad. ! No unified installer/package manager/universal packaging format/dependency tracking across all distros (The GNU Guix project, which is meant to solve this problem, is now under development - but we are yet to see whether it will be incorporated by major distros). Consider RPM (which has several incompatible versions, yeah), deb, portage, tar.gz, sources, etc. It adds to the cost of software development. ! Distros' repositories do not contain all available open source software (libraries conflicts don't even allow that luxury). The user should never be bothered with using ./configure && make && make install (besides it's insecure, can break things in a major way, and it sometimes simply doesn't work because the user cannot install/configure dependencies properly). It should be possible to install any software by downloading a package and double clicking it (yes, like in Windows, but probably prompting for a user/administrator password). ! Applications development is a major PITA . Different distros can use a) different libraries versions b) different compiler flags c) different compilers. This leads to a number of problems raised to the third power. Packaging all dependent libraries is not a solution, because in this case your application may depend on older versions of libraries which contain serious remotely exploitable vulnerabilities. ! Two most popular open source desktops, KDE and Gnome, can configure only few settings by themselves thus each distro creates its own bicycle (applications/utilities) for configuring a boot loader/​firewall/​ network/ users and groups/services/etc. Linux is a hell for ISP/ISV support personnel. Within the organization you can force a single distro on anyone, but it cannot be accomplished when your clients have the freedom to choose. ! It should be possible to configure pretty much everything via GUI (in the end Windows and Mac OS allow this) which is still not a case for some situations and operations. No polish and universally followed conventions. Different applications may have totally different shortcuts for the same actions, UI elements may be placed and look differently. Problems stemming from low Linux popularity and open source nature : ! Few software titles, inability to run familiar Windows software (some applications which don't work in Wine (look at the lines which contains the word \"regression\") have zero Linux equivalents). ! No equivalent of some hardcore Windows software like ArchiCAD/3ds Max/Adobe Premier/Adobe Photoshop/Corel Draw/DVD authoring applications/etc. Home and enterprise users just won't bother installing Linux until they can get their work done. ! A small number of games and few AAA games for the past six years. The number of available Linux games overall is less than 10% of games for Windows. Steam shows a better picture: 25% of games over there have Linux ports (in December 2016: Windows 25119 titles vs. Linux 6096 titles) but 98-99% out of them are Indies, i.e. AAA titles, specially recent, are a rarity in Linux. Wine is very unstable, very regressions prone, and no decent D3D 10/11/12 support. Questionable patents and legality status. USA Linux users cannot play many popular audio and video formats until they purchase appropriate codecs. General Linux problems : !! There's no guarantee whatsoever that your system will (re)boot successfully after GRUB (bootloader) or kernel updates - sometimes even minor kernel updates break the boot process (except for Windows 10 - but that's a new paradigm for Microsoft). For instance Microsoft and Apple regularly update ntoskrnl.exe and mach_kernel respectively for security fixes, but it's unheard of that these updates ever compromised the boot process. GRUB updates have broken the boot process on the PCs around me for at least ten times. (Also see compatibility issues below ). !! LTS distros are unusable on the desktop because they poorly support or don't support new hardware, specifically GPUs (as well as Wi-Fi adapters, NICs, sound cards, hardware sensors, etc.). Oftentimes you cannot use new software in LTS distros (normally without miscellaneous hacks like backports, PPAs, chroots, etc.), due to outdated libraries. A recent example is Google Chrome on RHEL 6/CentOS 6. !! Linux developers have a tendency to a) suppress news of security holes b) not notify the public when the said holes have been fixed c) miscategorize arbitrary code execution bugs as \"possible denial of service\" (thanks to Gullible Jones for reminding me of this practice - I wanted to mention it aeons ago, but I kept forgetting about that).\nHere's a full quote by Torvalds himself: \"So I personally consider security bugs to be just \"normal bugs\". I don't cover them up, but I also don't have any reason what-so-ever to think it's a good idea to track them and announce them as something special.\" \nYear 2014 was the most damning in regard to Linux security: critical remotely exploitable vulnerabilities were found in many basic Open Source projects, like bash ( shellshock ), OpenSSL ( heartbleed ), kernel and others. So much for \"everyone can read the code thus it's invulnerable\". In the beginning of 2015 a new critical remotely exploitable vulnerability was found, called GHOST . \nYear 2015 welcomed us with 134 vulnerabilities in one package alone: WebKitGTK+ WSA-2015-0002 . I'm not implying that Linux is worse than Windows/MacOS proprietary/closed software - I'm just saying that the mantra that open source is more secure by definition because everyone can read the code is apparently totally wrong. \nYear 2016 pleased us with several local root Linux kernel vulnerabilities as well as countless other critical vulnerabilities. \nMany Linux developers are concerned with the state of security in Linux because it is simply lacking. !! Linux/Unix web servers are generally a lot less secure than ... Windows web servers, \"The vast majority of webmasters and system administrators have to update their software manually and test that their infrastructure works correctly\". Seems like there are lots of uniquely gifted people out there thinking I'm an idiot to write about this. Let me clarify this issue: whereas in Windows security updates are mandatory and they are usually installed automatically, Linux is usually administered via SSH and there's no indication of any updates at all. In Windows most server applications can be updated seamlessly without breaking services configuration. In Linux in a lot of cases new software releases require manual reconfiguration (here are a few examples: ngnix, apache, exim, postfix). The above two causes lead to a situation when millions of Linux systems never receive any updates , because their respective administrators don't bother to update anything since they're afraid that something will break. August 2016 report from Kaspersky corroborates my thesis: in the first seven months of 2016 the number of infected Linux servers increased by 70%. !! A new Linux init(!) system systemd has an utterly broken design: systemd can and does segfault , crash and freeze . In a sane world init should never ever crash under no circumstances. Edit: systemd has become a lot more stable and reliable recently however this doesn't change the fact that an init daemon should be designed such a way 1) it should never leave the system in an undefined state 2) it should be trivially updateable 3) it should never crash. SystemD however has all these problems combined. I for one also believe that an init daemon should try to boot up to a login prompt whenever possible, however systemd will stop booting after encountering even minor problems with fstab. A year ago a simple solution was proposed: process id 1 (init) should be a very simple daemon, which will spawn all dependent systemd subsystems and processes. In this case the system can possibly recover from certain systemd errors. However no one really wants to implement this solution. Instead systemd grows bigger, more complicated and more prone to malfunctioning. Most embedded Linux system builders actually gave up on systemd due to its immoderate memory consumption and complexity. ! Fixed applications versions during a distro life-cycle. Say, you use DistroX v16.10 which comes with certain software. Before DistroX 18.10 gets released some applications get updated, get new exciting features but you cannot officially install, nor use them. ! Let's expand on the previous point. Most Linux distros are made such a way you cannot upgrade their individual core components (like kernel, glibc, Xorg, Xorg video drivers, Mesa drivers, etc.) without upgrading your whole system . Also if you have brand new hardware oftentimes you cannot install current Linux distros because almost all of them (aside from rare exceptions) don't incorporate the newest kernel release, so either you have to use alpha/development versions of your distro or you have to employ various hacks in order to install the said kernel. Some people argue that one of the problems that severely hampers the progress and expansion of Linux is that Linux doesn't have a clear separation between the core system and user space applications. In other words (mentioned throughout the article) third party developers cannot rely on a fixed set of libraries and programming interfaces (API/ABI) - in most other OSes you can expect your application to work for years without recompilation and extra fixes - it's often not possible in Linux. No native or/and simple solutions for really simple encrypted file sharing in the local network with password authentication (Samba is not native, it's a reverse engineered SMB implementation, it's very difficult for the average Joe to manage and set up. Samba 4 reimplements so many Linux network services/daemons - it looks like a Swiss knife solution from the outer space). Glibc by design \"leaks\" memory (due to heap fragmentation ). Firefox for Linux now uses its own memory allocator. KDE Konsole application uses its own memory allocation routines. Neil Skrypuch posted an excellent explanation of this issue here . ! Just (Gnome) not enough (KDE) manpower (X.org) - three major Open Source projects are seriously understaffed. ! It's a major problem in the tech industry at large but I'll mention it anyways because it's serious: Linux/open source developers are often not interested in fixing bugs if they cannot easily reproduce them (for instance when your environment substantially differs from the developer's environment). This problem plagues virtually all Open Source projects and it's more serious in regard to Linux because Linux has fewer users and fewer developers. Open Source developers often don't get paid to solve bugs so there's little incentive for them to try to replicate and squash difficult to reproduce bugs. ! A galore of software bugs across all applications. Just look into KDE or Gnome bugzilla's - some bugs are now ten years old with over several dozens of duplicates and no one is working on them. KDE/Gnome/etc. developers are busy adding new features and breaking old APIs, fixing bugs is of course a tedious and difficult chore. ! Steep learning curve (even today you oftentimes need to use CLI to complete some trivial or non-trivial tasks, e.g. when installing third party software ). ! Poor or almost missing regression testing in Linux kernel (and, alas, in other Open Source software too) leading to a situation when new kernels may become totally unusable for some hardware configurations (software suspend doesn't work, crashes, unable to boot, networking problems, video tearing, etc.) GUI network manager in Linux has serious problems . NM cannot change your NIC hardware parameters . You cannot establish PPPoE connections over Wi-Fi. Poor interoperability between the kernel and user space applications. E.g. many kernel features get a decent userspace implementation years after introduction. ! Linux security/permissions management is a bloody mess: PAM, SeLinux, Udev, HAL (replaced with udisk/upower/libudev), PolicyKit, ConsoleKit and usual Unix permissions (/etc/passwd, /etc/group) all have their separate incompatible permissions management systems spread all over the file system. Quite often people cannot use their digital devices unless they switch to a super user. No (easy to use) application level sandbox (like e.g. SandBoxie ) - Fedora is working hard on it. ! CLI (command line interface) errors for user applications. All GUI applications should have a visible errors representation. ! Very poor documentation and absence of good manuals/help system. Questionable services for Desktop installations (Fedora, Suse, Mandriva, Ubuntu) - not really important with the advent of systemd. ! No unified widely used system for packages signing and verification (thus it becomes increasingly problematic to verify packages which are not included by your distro). No central body to issue certificates and to sign packages. There are no antiviruses or similar software for Linux ( the existing ones are made for finding Windows viruses and analyzing Windows executives - i.e. they are more or less useless for Linux). Say, you want to install new software which is not included by your distro - currently there's no way to check if it's malicious or not. !! Linux distributions do not audit included packages which means a rogue evil application or a rogue evil patch can easily make into most distros thus endangering the end user. ! A very bad backwards and forward compatibility . ! Due to unstable and constantly changing kernel APIs/ABIs Linux is a hell for companies which cannot push their drivers upstream into the kernel for various reasons like their closeness (NVIDIA, ATI, Broadcom, etc.), or inability to control development or co-develop (VirtualBox/​Oracle, VMWare/​Workstation, etc.), or licensing issues (4Front Technologies/OSS). Old applications rarely work in new Linux distros (glibc incompatibilities (double-free errors, memory corruption, etc.), missing libraries, wrong/new libraries versions). Abandoned Linux GUI software generally doesn't work in newer Linux distros. Most well written GUI applications for Windows 95 will work in Windows 10 (21 years of compatibility on binary level). New applications linked only against lib C will refuse to work in old distros. (Even though they are 100% source compatible with old distros). New libraries versions bugs, regressions and incompatibilities . Distro upgrade can render your system unusable (kernel might not boot, some features may stop working). There's a myth that backwards compatibility is a non-issue in Linux because all the software has sources. However a lot of software just cannot be compiled on newer Linux distros due to 1) outdated, conflicting, no longer available libraries and dependencies 2) every GCC release becoming much stricter about C/C++ syntax 3) Users just won't bother compiling old software because they don't know how to 'compile', nor they should know how to do that. DE developers (KDE/Gnome) routinely cardinally change UI elements, configuration, behaviour, etc. Open Source developers usually don't care about applications behaviour beyond their own usage scenarios. I.e. coreutils developers for no good reasons have broken head/tails functionality which is used by the Loki installer. Quite often you cannot run new applications in LTS distros. Recent examples: GTK3 based software (there's no official way to use it in RHEL6), and Google Chrome (Google decided to abandon LTS distros). Linux has a 255 bytes limitation for file names (this translates to just 63 four bytes characters in UTF-8) - not a great deal but copying or using files or directories with long names from your Windows PC can become a serious challenge. ! Current serious issues with the author's own PC: 1) ALSA's audio mixer works differently than Windows' audio mixer causing an utter confusion . 2) Suspend (specially in EUFI mode ) is totally broken. Suspend doesn't work at all actually - NVIDIA refuses to fix this issue which plagues only Linux. 3) RPM package manager is broken . 4) My webcam does not work when being initialized by Skype (it doesn't do anything unusual). Certain applications that exist both for Windows and Linux start up faster in Windows than in Linux (barring SSD disks but they are still prohibitively costly), sometimes several times faster. All native Linux filesystems are case sensitive about filenames which utterly confuses most users. This wonderful peculiarity doesn't have any sensible rationale. Less than 0.01% of users in the Linux world depend on this feature. !! Most Linux filesystem cannot be fully defragmented unless you compact and expand your partition which is very dangerous. Ext4fs supports defragmentation but only for individual files . You cannot combine data and turn free space into one continuous area. XFS supports full defragmentation though, but by default most distros offer Ext4 and there's no official safe way to convert ext4 to XFS. Linux preserves file creation time only for certain filesystems (ext4, NTFS, fat). Another issue is that user space utilities currently cannot view or modify this time (ext4 `debugfs` works only under root). A lot of UNIX problems (PDF, 3MB) apply to Linux/GNU as well. There's a lot of hostility in the open source community. This is so freaking \"amazing\" , you absolutely have to read it - the developer behind XScreenSaver fought with Debian developers. Random ramblings or why you may hate Linux (some are severely outdated/irrelevant/fixed but they are left for posterity to see the innards of the open source movement and community): 2) A big discussion on Slashdot as to why people still prefer Windows over Linux. 3) Another big discussion on Slashdot as to why Linux still lacks. 4) Any KDE plasmoid can freeze the entire KDE desktop - seems to be fixed in KDE5.", "external_links": [], "published": "2017-02-07T20:39:00.000+02:00", "crawled": "2017-02-08T20:27:06.121+02:00", "highlightTitle": ""}