{"organizations": [], "uuid": "26a8680ddc91aa2c2e93fc03ce6986126bf9b46f", "thread": {"social": {"gplus": {"shares": 24}, "pinterest": {"shares": 1}, "vk": {"shares": 1}, "linkedin": {"shares": 204}, "facebook": {"likes": 571, "shares": 571, "comments": 0}, "stumbledupon": {"shares": 1}}, "site_full": "www.sitepoint.com", "main_image": "https://www.sitepoint.com/wp-content/themes/sitepoint/assets/images/icon.javascript.png", "site_section": "", "section_title": "", "url": "https://www.sitepoint.com/yarn-vs-npm/", "country": "US", "domain_rank": 1430, "title": "Yarn vs npm: Everything You Need to Know", "performance_score": 5, "site": "sitepoint.com", "participants_count": 0, "title_full": "Yarn vs npm: Everything You Need to Know", "spam_score": 0.004, "site_type": "news", "published": "2017-02-27T17:34:00.000+02:00", "replies_count": 0, "uuid": "26a8680ddc91aa2c2e93fc03ce6986126bf9b46f"}, "author": "", "url": "https://www.sitepoint.com/yarn-vs-npm/", "ord_in_thread": 0, "title": "Yarn vs npm: Everything You Need to Know", "locations": [], "entities": {"persons": [{"name": "yarn", "sentiment": "none"}], "locations": [], "organizations": [{"name": "google", "sentiment": "none"}, {"name": "facebook", "sentiment": "none"}]}, "highlightText": "", "language": "english", "persons": [], "text": "yarn add [–dev] \nSimilar to npm install <package> , yarn add <package> allows you to add and install a dependency. As the name of the command implies, it adds a dependency, meaning it automatically saves a reference to the package in the package.json file, just as npm’s --save flag does. Yarn’s --dev flag adds the package as a developer dependency, like npm’s --save-dev flag. npm install documentation yarn licenses [ls|generate-disclaimer] \nAt the time of writing, no npm equivalent is available. yarn licenses ls lists the licenses of all installed packages. yarn licenses generate-disclaimer generates a disclaimer containing the contents of all licenses of all packages. Some licenses state that you must include the project’s license in your project, making this a rather useful tool to do that. yarn licenses documentation yarn why \nThis command peeks into the dependency graph and figures out why given package is installed in your project. Perhaps you explicitly added it, perhaps it’s a dependency of a package you installed. yarn why helps you figure that out. yarn why documentation yarn upgrade [package] \nThis command upgrades packages to the latest version conforming to the version rules set in package.json and recreates yarn.lock . This is similar to npm update . \nInterestingly, when specifying a package, it updates that package to latest release and updates the tag defined in package.json . This means this command might update packages to a new major release. yarn upgrade documentation yarn generate-lock-entry \nThe yarn generate-lock-entry command generates a yarn.lock file based on the dependencies set in package.json . This is similar to npm shrinkwrap . This command should be used with caution, as the lock file is generated and updated automatically when adding and upgrading dependencies via yarn add and yarn upgrade . npm shrinkwrap documentation Stability and Reliability \nCould the Yarn hype train become derailed? It did receive a lot of issue reports the first day it was released into the public, but the rate of resolved issues is also astounding. Both indicate that the community is working hard to find and remove bugs. Looking at the number and type of issues, Yarn appears stable for most users, but might not yet be suitable for edge cases. \nNote that although a package manager is probably vital for your project, it is just a package manager. If something goes wrong, reinstaling packages shouldn’t be difficult, and nor is reverting back to npm. The Future \nPerhaps you’re aware of the history between Node.js and io.js. To recap: io.js was a fork of Node.js, created by some core contributors after some disagreement over the project’s governance. Instead, io.js chose an open governance. In less than a year, both teams came to an agreement, io.js was merged back into Node.js, and the former was discontinued. Regardless of the rights or wrongs, this introduced a lot of great features into Node.js. \nI’m seeing similar patterns with npm and Yarn. Although Yarn isn’t a fork, it improves several flaws npm has. Wouldn’t it be cool if npm learned from this and asked Facebook, Google and the other Yarn contributors to help improve npm instead? Although it is way too early to say if this will happen, I hope it will. \nEither way, Yarn’s future looks bright. The community appears excited and is receiving this new package manager well. Unfortunately, no road map is available, so I am not sure what surprises Yarn has in store for us. Conclusion \nYarn scores points with way better defaults compared to npm. We get a lockfile for free, installing packages is blazing fast and they are automatically stored in package.json . The impact of installing and using Yarn is also minimal. You can try it on just one project, and see if it works for you or not. This makes Yarn a perfect drop-in substitute for npm. \nI would definitely recommend trying Yarn on a single project sooner or later. If you are cautious about installing and using new software, give it a couple of months. After all, npm is battle-tested, and that is definitely worth something in the world of software development. \nIf you happen to find yourself waiting for npm to finish installing packages, that might be the perfect moment to read the migration guide ;) \nWhat do you think? Are you using Yarn already? Are you willing to give it a try? Or is this just contributing to the further fragmentation of an already fragmented ecosystem? Let me know in the comments below. More: ", "external_links": [], "published": "2017-02-27T17:34:00.000+02:00", "crawled": "2017-02-27T12:35:38.880+02:00", "highlightTitle": ""}