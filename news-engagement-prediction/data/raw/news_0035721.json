{"organizations": [], "uuid": "a04feeb6d03b6a42f7eefdf79b41b145bda7bf71", "thread": {"social": {"gplus": {"shares": 1}, "pinterest": {"shares": 0}, "vk": {"shares": 0}, "linkedin": {"shares": 5}, "facebook": {"likes": 304, "shares": 304, "comments": 1}, "stumbledupon": {"shares": 0}}, "site_full": "www.c-sharpcorner.com", "main_image": "http://www.c-sharpcorner.com/Images/csharp-corner.png", "site_section": "http://www.asp.net/rss/spotlight", "section_title": "ASP.NET Community Spotlight", "url": "http://www.c-sharpcorner.com/article/automating-deployment-of-asp-net-core-to-azure-app-service-from-linux/", "country": "US", "domain_rank": 5225, "title": "Automating Deployment Of ASP.NET Core To Azure App Service From Linux", "performance_score": 3, "site": "c-sharpcorner.com", "participants_count": 0, "title_full": "Automating Deployment Of ASP.NET Core To Azure App Service From Linux", "spam_score": 0.0, "site_type": "news", "published": "2017-02-17T19:13:00.000+02:00", "replies_count": 0, "uuid": "a04feeb6d03b6a42f7eefdf79b41b145bda7bf71"}, "author": "", "url": "http://www.c-sharpcorner.com/article/automating-deployment-of-asp-net-core-to-azure-app-service-from-linux/", "ord_in_thread": 0, "title": "Automating Deployment Of ASP.NET Core To Azure App Service From Linux", "locations": [], "entities": {"persons": [{"name": "eminem", "sentiment": "none"}], "locations": [{"name": "ubuntu", "sentiment": "none"}], "organizations": [{"name": "microsoft", "sentiment": "negative"}, {"name": "azure app service", "sentiment": "none"}, {"name": "powershell", "sentiment": "none"}]}, "highlightText": "", "language": "english", "persons": [], "text": "Expand \nIntroduction and Background On Microsoft Windows operating systems, using great tools like Visual Studio, it is extremely easy to upload and publish your web application projects to Microsoft Azure; but what about other platforms such as Linux? Microsoft has recently released PowerShell as an open source project, which is a great tool to be used in the cases where you have developers who understand and use PowerShell. But, if you don't happen to have any such developer, you would need to stick around the traditional tools and sometimes, they will require you to manually perform these changes. In this post, I am going to cover the teams who are using Git repositories for their projects and I will cover how they can basically automate the publishing of their projects after each successful build. On Linux, we can basically create small scripts that run in the background just like PowerShell or the Windows Command Prompt terminal's batch files. Git programs are required for this to run. Actually, what I am going to show in this, is to execute the same commands but in a manner that most of the repository's information is already built, the commit message is updated, and the content is published to the Azure app service. The purpose of this guide is to make the entire process as easy to understand, as A, B and C. I will be using a real world application to show you how to do what and where instead of talking generally about many things at the same time. Before moving forward, a very little knowledge of how Git system works is required from you because some things might get a bit technical in the post below, and thus you must have the knowledge of how Git systems work, in order to control the versioning of files. Secondly, you are required to know how you can use \"dotnet\" script to create, build and run the .NET Core applications. If you don't know .NET Core, I will reference to a few of my own beginner-friendly articles which you can read to learn more on this. Finally, you are required to have an active Azure account with a working subscription. If you don't happen to have one, you can get a free account with $200 credits to try out all of Azure! Once these requirements are met, you can continue to actually use the article for something useful. Creating the application -- the entire part This part has been shared and taught many times, on many occasions. I wrote an article, on the same concept, a few days ago and I would like to refer that article to you to learn how you can create a new application with web template in .NET Core. Creating and hosting ASP.NET Core application on Linux â€” Nothing Third-Party . Read this article for a complete overview and a walk-though of the concept of building and running the applications on the Linux environment. I will move onward from this step, because you must be aware of the ways of creating your own applications. Deployment of web applications to Azure Now, comes the main part. This article entirely focuses on the deployment of applications to Microsoft Azure instead of developing an application. There would be some parts where I will be modifying the parts, but that is just to tell you how easy it would be to re-deploy the application using the automation, by executing a simple command. Although it is not required, but you are required to have a very basic introduction to automation tools. You can get a good tutorial about these \"toolings\" easily from any software engineering guide. Using git for deployment Microsoft Azure uses many methods and ways to deploy the applications on the cloud, such as using Visual Studio to deploy the applications and leave the configurations to the tool itself. However, since Linux environments don't have Visual Studio, most of the tasks are left with source control tools (Visual Studio Code also uses the same git programs to upload the code to repositories). I will show you how you can create a minimal script or a program that manages all of these tasks for you -- automation program. On Linux, mostly and typically, git comes pre-installed in most of the Linux-distributions, such as Ubuntu, etc. However, if that is not available, you can easily install it using. $ sudo apt-get install git Or using a similar command, such as using yum etc. This would install and setup the git for your environment. Once you have git installed, you need to set a few things up. Git requires the name and email address for notifying who made a change to the system. So for that, we would require to execute the following commands. $ git config --global user.name \"Eminem\" $ git config --global user.email \"email@domain.com\" You should pass the name and address values that you hold - I used Eminem and a random email address. And to check if your personal configurations are done correctly, you can execute the following command to test that. $ git config --list These are the required configurations that you must do before you can use git for any purpose at all. Note: You also need to create a new web application service (Azure App Service) on Microsoft Azure so that you can deploy the application somewhere. Since I do not want to go deep into the development and starting of this session, I would like you guys to go and watch this video of mine, providing an overview of Microsoft Azure App Service (you may have to put the volume a bit higher). Once you have that, you can continue forward and actually set up repositories to deploy the application. I used the following information while creating a new service, so that, if I use a name, you should know where did that come from. Upon creating, you can visit the web service from your browser using the link provided and on the first visit without any update, the following page is shown. It shows that you can deploy your web applications, from many sources, using many services such as FTP, Git etc. I will show you how to do this using Git... There are a few other things that I would like to show you here. I will show you how to do this, using git. I will also show you how to test the build integrity -- whether build succeeds or not. I will also show you whether git considers to commit and push the changes to the server or not. \nSo, these are a few of the tests that I have prepared for the automation tool that will be helpful for us in this case. These things are not provided on the tutorials that are available online. They are just simple straight-forward ones which only show you how to do it, not whether it is helpful to do it at all. Setting up the local repository On the machine side, the first thing to do is to set up a local repository for git deployments. Even if you have created a project, you can still create a repository for that project and then, use it as the source for your application's content. So, for that, the following commands would work. # If you have not created a project, remove these lines. $ dotnet new -t web", "external_links": [], "published": "2017-02-17T19:13:00.000+02:00", "crawled": "2017-02-18T01:11:02.926+02:00", "highlightTitle": ""}