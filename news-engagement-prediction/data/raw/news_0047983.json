{"organizations": [], "uuid": "c615f8fe0f53b3d69cd177897fa76919f88ced0c", "thread": {"social": {"gplus": {"shares": 237}, "pinterest": {"shares": 28}, "vk": {"shares": 0}, "linkedin": {"shares": 89}, "facebook": {"likes": 142, "shares": 142, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "medium.com", "main_image": "https://cdn-images-1.medium.com/max/1200/1*UA2ebfw3RASQXPI9oHkoCg.jpeg", "site_section": "", "section_title": "", "url": "https://medium.com/message/the-great-works-of-software-705b87339971", "country": "US", "domain_rank": 380, "title": "The Great Works of Software – The Message – Medium", "performance_score": 1, "site": "medium.com", "participants_count": 0, "title_full": "The Great Works of Software – The Message – Medium", "spam_score": 0.145, "site_type": "news", "published": "2017-02-21T10:27:00.000+02:00", "replies_count": 0, "uuid": "c615f8fe0f53b3d69cd177897fa76919f88ced0c"}, "author": "Paul Ford", "url": "https://medium.com/message/the-great-works-of-software-705b87339971", "ord_in_thread": 0, "title": "The Great Works of Software – The Message – Medium", "locations": [], "entities": {"persons": [{"name": "richard stallman", "sentiment": "none"}, {"name": "guy steele", "sentiment": "none"}, {"name": "pac-man", "sentiment": "none"}, {"name": "pac man", "sentiment": "none"}, {"name": "ken thompson", "sentiment": "none"}, {"name": "jr.", "sentiment": "none"}, {"name": "dennis ritchie", "sentiment": "none"}], "locations": [{"name": "bloom county", "sentiment": "none"}], "organizations": [{"name": "smithsonian", "sentiment": "none"}, {"name": "bell labs", "sentiment": "none"}, {"name": "gpl", "sentiment": "none"}, {"name": "teco", "sentiment": "none"}, {"name": "cooper-hewitt design museum", "sentiment": "none"}, {"name": "bell labs unix", "sentiment": "none"}, {"name": "cooper-hewitt", "sentiment": "none"}, {"name": "mit", "sentiment": "none"}, {"name": "association for computing machinery", "sentiment": "none"}, {"name": "namco", "sentiment": "none"}]}, "highlightText": "", "language": "english", "persons": [], "text": "—Pac-Man Theme Song https://www.youtube.com/watch?v=BxYzjjs6d1s Pac-Man machines ran on solid-state technology; they had no moving parts and operated for decades. The game itself seeped out into every aspect of pop culture: wind-up toys, watches, rip-offs galore, plush toys, a terrible animated cartoon, featuring a Pac-Baby. It even showed up in Bloom County . It was in every way a fad, but nonetheless people kept plowing quarters into Pac-Man machines for years; they became one of the steadiest earners at arcades. Namco, the game’s distributor, today offers a collected version of Pac-Man games and its derivants, like Ms. Pac Man, bundled together into something called “ Pac-Man Museum ”—its place in the canon has become part of its marketing. Echoes of its gameplay show up anywhere a joystick is used. And the image of a pie missing a slice has become a universal symbol for “video game”; people dress up and run around in Pac-Man costumes . And it’s remained part of the culture for 34 years. Bell Labs Unix This became your Mac. Dennis Ritchie (standing) and Ken Thompson at a PDP-11 computer in the 1970s. (CC licensed; via: http://commons.wikimedia.org/wiki/File:Ken_Thompson_(sitting)_and_Dennis_Ritchie_at_PDP-11_(2876612463).jpg ) Unix is an operating system, which means it’s a set of programs that run other programs on a computer. It’s part of what’s inside your Macintosh computer running Mac OS X, and it’s what runs many of the servers that you access on the web. It’s also inside billions of phones. The open-source operating system Linux is a kind of Unix, and you can run Linux inside of a web browser now , because everything can be everything else in the land of computers. So if you want to take Unix for a spin, go to. Unix was born at Bell Labs in 1969. What it offered over its predecessors was: As little as possible. It came with a few handfuls of tiny little programs and then assumed that people would want to chain all those programs together (“piping” the output of one program into the input of another). It just didn’t make that many assumptions about what people wanted. (“Perhaps paradoxically,” wrote its creators, “the success of the Unix system is largely due to the fact that it was not designed to meet any predefined objectives.”) Unix is best-known for its command-line “shell.” Here’s a Unix shell program that makes a list of the top ten words in this Medium post; it’s okay if your eyes glaze over: cat medium_post.txt | tr '''\\n' | tr -d '[:punct:]' \\| tr '[:upper:]''[:lower:]' | sort | uniq -c \\| sort -nr | tail -n+10 | head -30 \\| column -c 60 It looks like gobbledygook if you’ve never used Unix, but it’s actually a simple set of tools chained together (I placed an explanation in a comment above if you’re curious what it all means). Anyone who takes a week and learns about Unix shells will understand what’s happening here. That’s a ton of power available to users for very little trade-off in time and energy; it’s not easy but it’s extremely powerful and not that hard to learn . Here’s what that command spits out, above: 45 that 17 unix 13 one 33 its 16 on 13 into 33 for 16 has 12 time 27 software 15 was 12 not 26 as 15 office 11 they 25 but 14 this 11 pacman 21 people 14 so 10 world 21 are 14 more 10 photoshop 19 about 14 an 10 language 18 at 13 with 10 ideas In 1983, when Pac-Man was three, the Association for Computing Machinery gave Dennis Ritchie and Ken Thompson, the inventors of Unix, the Turing Award, which is the biggest award in computing. The ACM wrote : The success of the UNIX system stems from its tasteful selection of a few key ideas and their elegant implementation. The model of the Unix system has led a generation of software designers to new ways of thinking about programming. The genius of the Unix system is its framework, which enables programmers to stand on the work of others. True. You read the documentation for early versions of Unix , and it’s all very simple and plain-spoken, if pretty wonky. Here’s the original paper from 1974, if you’re interested: http://pdos.csail.mit.edu/6.828/2004/readings/ritchie74unix.pdf There’s a sad tendency in most manuals and programming guides to congratulate people simply for thinking. Not here; you’re expected to think. That can be very exciting when you’re used to being patronized, and it’s one of the best things about Unix. The people who invented Unix were not trying to teach you how to use a computer as we understand computers today; rather, they were educating professionals as to the best way to operate an incredibly heavy and expensive piece of industrial equipment. The 1974 paper says that you can run Unix on cheap computers, computers that cost as little as $40,000 ($202,000 in 2014.) Right now there are two Unix workstations in my closet that cost $35 each. The phone company gave birth to Unix. Now there is no phone company and Unix runs on your phone. Mass production and cheaper technology have changed almost everything about how we use computers—but not quite. Some fundamental ideas about software are the same, four decades later. Unix made it easy for computer people to talk about computing, and it still does. GNU Emacs Looks like fun! Finally, GNU Emacs . This is my text editor—meaning that it’s emphatically not a word processor, but rather a tool for dealing with pure text, such as is used in programming languages. There are other text editors, like Vim , and there are passionate debates over which is best. But it’s not simply in its ability to wrangle words on screen that Emacs excels; it’s that each letter you type is not simply part of a file but rather a dynamic entity that can be manipulated, enhanced, compared, and transformed. The “GNU” means that it’s a part of the GNU Operating System , and stands for “GNU’s Not Unix” (a recursive acronym). It was the hackers’ customary humorous way of saying, “It’s like Unix but we started from scratch.” “ Emacs ” is a contraction of “Editor MACroS.” Macros are little rules, sort of mini-programs. So—stay with me— Emacs started as a set of macros built on top of TECO , which was born in the 1960s and stood for T ape E ditor and CO rrector , because it let you edit things on paper tapes ( see correction at right ). People used it at MIT. People started messing with TECO and adding macros, and then a man named Richard Stallman and another man named Guy Steele, Jr. , wrapped all of that up into a new program called Emacs. That was in 1976. Typical emacs working session What makes Emacs different is that it’s not so much a program as an editor-development toolkit. The original Emacs used the TECO command language for its macros, but a major rewrite in 1984/85 provided a full-fledged programming language “under the hood,” called Emacs LISP (elisp). This version is the Emacs that we use today. You don’t need to program in elisp to use Emacs, but it’s there if you want to try something new. It’s absolutely, infinitely extensible. Since that rewrite the community around Emacs has been accreting little elisp programs into its standard library—thousands of them—that perform an extraordinary range of software tasks. When you download and use the program they are already installed, ready to use, and you can get yet more of them on the Internet. There are calendar programs, productivity tools , and outliners, a version of Tetris that is perfectly playable, a text adventure , tools for searching and replacing through thousands of files, and on and on, all built up together. As you work, whether writing code or writing prose, Emacs is constantly trying to guess what your text means; it tries to intuit what you want and what you mean. Being as it’s edging on 40 years old, it knows quite a bit. There are modes for different languages. You switch from one mode to another depending on what you’re doing. There’s txt-mode for editing text, js2-mode for editing JavaScript code, outline-mode for editing outlines, and modes built atop those. Different commands mean different things in these modes. The nature of the editor shifts slightly depending on what you’re doing. But because all of these modes exist and are well understood by hundreds of thousands of people, when new technologies and programming languages arrive, Emacs responds—often very quickly. There are modes for just about every programming language in common use, and for dozens that are not in common use at all. The code history of Emacs goes back 29 years and can be read online. You can see all of the code that has gone into Emacs over decades because that code was made available to everyone under a license known as the GNU General Public License (GPL). This license grants “legal permission to copy, distribute and/or modify” software code to all who follow its provisions. The GPL is different in intent from many “open source” licenses. Wrote Richard Stallman in an essay on the GNU website : For the free software movement, free software is an ethical imperative, essential respect for the users’ freedom. By contrast, the philosophy of open source considers issues in terms of how to make software ‘better’—in a practical sense only. If one wants to distribute GPLed software, one must also distribute its source code. This was a unique feature of the license: It defined a specific, then-novel freedom to code. Many other licenses—the popular MIT License is one example—don’t include such a provision; one can simply use the code as one sees fit. Imagine a popular song that many other musicians wanted to play in their own concerts. Now imagine if the original songwriter said: “Great! Play it as often as you want. Feel free to change the lyrics or the tune. You can even charge people to hear it.” Sounds good, right? But the songwriter also has a request: “If you play this song in public you must distribute the sheet music to the audience, updated to include any changes you made to the lyrics and tune.” That might seem a strange request, but it’s hardly an unfair one. No one can insist that it’s “their” song, and everyone who wants to perform it can do so. The GPL’s application to Emacs irrevocably placed Emacs into the cultural commons. It’s more like a park or a reservoir than a skyscraper or a bank. So while it is not itself software, the GPL was and is an essential component of the success of Emacs, and Emacs was one of the software tools that first introduced people to the GPL. The software and its license grew up together. As a consequence, today you can skim over that source code (it would take years to read it all) and see programmers coming and going. You can see how Emacs reacted, as a community and as a technology, to the incredible rate of change around it. You can also compile the code and use it, and many thousands of people do use it; it is never not in use on my computer. Emacs represents literally decades of continual, community contemplation of a solitary question: What does it mean to create with words and symbols? Conclusion Planetary, an iPad app acquired by the Cooper-Hewitt Design Museum(image from http://www.cooperhewitt.org/object-of-the-day/2013/08/26/planetary-collecting-and-preserving-code-living-object ) Canons are tricky things. There are pieces of software—like the TCP/IP stack that allows computers to communicate on the Internet—that have fundamentally changed global culture. The legendary programming language TeX , used to prepare typeset documents, has been around for decades and has a massive community. And of course many other massively popular software products that are worthy of consideration. I expect that people will leave comments to that effect. Not long ago the Cooper-Hewitt Design Museum (part of the Smithsonian) acquired an iPad app called Planetary for its collection: With Planetary we are hoping to preserve more than simply the vessel, more than an instantiation of software and hardware frozen at a moment in time: Commit message fd247e35de9138f0ac411ea0b261fab21936c6e6 authored in 2011 and an iPad2 to be specific. Translated from moon language, this means that goodly museum people acquired this app as an art object—as a set of code and graphical assets and sounds as they were assembled at a specific moment in time (“commit message”) on a specific platform (“iPad2”). Museums have a tricky time of it, because they need to put pins in things, assign names and numbers, and integrate them into larger historical collections. In acquiring Planetary, the Cooper-Hewitt was (very consciously) asking the question: What kind of art is software? How do we name it? Their work is like the work of lexicographers, who must try to encapsulate spoken language into dictionaries, even though language is huge, changing, and ever-moving, like clouds. It’s impossible but also incredibly useful. But software is a unique art because it is so reactive. Not just on the screen but over time, as programs adapt and change with the culture—a culture they help define. Software provides identity (consider the Linux user, the web zealot, the “Unix greybeard”), a sense of affiliation and shared experience. The greatest works of software are not just code or programs, but social, expressive, human languages. They give us a shared set of norms and tools for expressing our ideas about words, or images, or software development. Great software gives us tremendous freedom, as long as we work within its boundaries. ", "external_links": [], "published": "2017-02-21T10:27:00.000+02:00", "crawled": "2017-02-21T05:44:57.070+02:00", "highlightTitle": ""}