{"organizations": [], "uuid": "57e6ee625d684251d6e8af6f5fca0b27b92a6989", "thread": {"social": {"gplus": {"shares": 12}, "pinterest": {"shares": 0}, "vk": {"shares": 2}, "linkedin": {"shares": 64}, "facebook": {"likes": 134, "shares": 134, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "medium.com", "main_image": "https://cdn-images-1.medium.com/max/1200/1*uFfOQpFTgvsw3A1b3Jvcfg.png", "site_section": "", "section_title": "", "url": "https://medium.com/ux-power-tools/a-better-way-to-make-buttons-in-sketch-6c23470f27c", "country": "US", "domain_rank": 380, "title": "A Better Way to Make Buttons in Sketch – UX Power Tools – Medium", "performance_score": 1, "site": "medium.com", "participants_count": 0, "title_full": "A Better Way to Make Buttons in Sketch – UX Power Tools – Medium", "spam_score": 0.203, "site_type": "news", "published": "2017-02-16T09:49:00.000+02:00", "replies_count": 0, "uuid": "57e6ee625d684251d6e8af6f5fca0b27b92a6989"}, "author": "Jon Moore", "url": "https://medium.com/ux-power-tools/a-better-way-to-make-buttons-in-sketch-6c23470f27c", "ord_in_thread": 0, "title": "A Better Way to Make Buttons in Sketch – UX Power Tools – Medium", "locations": [], "entities": {"persons": [{"name": "peter nowell", "sentiment": "none"}, {"name": "tom hanks", "sentiment": "none"}, {"name": "wilson", "sentiment": "none"}], "locations": [{"name": "innovatemap", "sentiment": "none"}, {"name": "cast away", "sentiment": "none"}], "organizations": [{"name": "better way", "sentiment": "positive"}, {"name": "ux power tools", "sentiment": "positive"}]}, "highlightText": "", "language": "english", "persons": [], "text": "Senior Design Partner at Innovatemap and co-founder of UX Power Tools. Feb 15 A Better Way to Make Buttons in Sketch Buttons like you’ve never seen them before! Probably. Download this demo file to follow along, or check out UX Power Tools to get the entire UI kit, constructed with all kinds of smart symbols just like this one. Sketch symbols are great because they provide one central place to manage components. Buttons are some of the easiest components to create, but like text fields, they have a lot of different states, colors, and styles. So it usually means creating a bunch of different symbols. The Old Way Here’s what my button symbols looked like about three months ago: Raise your hand if your symbol page looks like this…🖐🏼 Nice and clean! I used this approach for about 12 months and never had any issues. It’s a fine way to manage button symbols, and they cover all of the states I’ll need in my designs: Button Colors Button States Default, Hover, Pressed, Disabled Strictly speaking this isn’t bad . But this is going to be a bit of a headache down the road: If I want to add a green button, I’ll need three new symbols…one to cover each button state. If I want a white button with blue text, I’ll need three new symbols. If I want to get rid of the border on all of my buttons, I’ll need to update it on every button symbol I’ve created. Ten symbols for just one component?…really?… is that necessary? A New Way I’ll save the theatrics and just show you what we’re creating first. My UI kit no longer has 10+ button symbols. Now…just one. How lonely! This reminds me of that sad scene from Cast Away where Tom Hanks is all alone on his raft. RIP Wilson. Full disclosure: This one symbol is a bit misleading because it does require we build other symbols that we’ll use as pieces to construct our button. But these symbol pieces are used in tons of other components throughout my UI kit, so it ends up being a positive tradeoff. When we’re finished, you can create a rainbow of buttons in all kinds of states… all from a single button symbol. Check it out: One symbol made all of these. It’s like when you leave two bunnies alone and you come back to an entire zoo. Button Structure There are three nested symbols in this button symbol: The Button Text (important): We use this to change what the button says. The Button Icon (not as important): We can turn this on if the button is in a “loading” state. The Button Container (the most important): This gives us the shape, color, and state. These three symbols are about to blow your mind. The Button Text I’ve written about this a little bit before in the article below, but I’ll recap things again for posterity: Warning: More GIFs than the peanut butter aisle. medium.com “Why is the text a symbol?” she asked, emphatically. So you don’t have to use symbols for your text, but in doing so, you’re adding immense flexibility to your button. As a quick reminder, Sketch allows you to swap nested symbols in and out to protect you from the dreaded Detach from Symbol action. The simplest (and most common) use case is for icons: Swap an empty checkbox symbol for one that is checked. Easy-peasy. I’m effectively doing the exact same thing, but with text. I created 10 text styles in Sketch, then used those text styles to create a unique symbol for each one. These text styles and colors actually map nicely back to my central stylesheet . The Golden Rule of Symbol Swapping Sketch only allows you to swap symbols with other symbols that are the exact same size. That is, if your symbol artboards are even 1px bigger or smaller than each other, they will NOT appear in your symbol override dropdown (see below). So I had to ensure that all of my text symbol artboards above were exactly the same height and width. Because the text of my button is a nested symbol, I just choose one of my other text symbols from the dropdown of my symbol instance if I ever want my text to be a different color. HOW EASY IS THAT?! So easy a well-trained goat could do it. Admittedly, I went a little bit overboard with my text symbols by having all kinds of different colors. But at minimum, you’ll probably want a light text symbol and a dark text symbol, which probably amounts to white text and primary brand color text. The Button Icon This is probably the least important symbol — feel free to leave it out if you want — but I’ve found it useful in a few projects. It’s the notion of illustrating a response after a button is clicked. The system is thinking! It’s probably thinking I screwed up, but it’s still thinking ! The basic idea around “master symbols” like this button is that you’re effectively stacking all of the potential component states into a single symbol, then turning the nested symbols inside of it on or off depending on the state that you’re trying to show off. The icon symbol layer in our master button symbol is the “placeholder” that represents our button loading state (see above). Frankly, there’s not much to this layer. I just have an icon symbol with that little loading shape, then I floated it in the center of the button. Not sure what “floating” means? Read this brilliant article by Peter Nowell . He doesn’t know this, but he taught me everything I know: ", "external_links": [], "published": "2017-02-16T09:49:00.000+02:00", "crawled": "2017-02-19T02:45:46.789+02:00", "highlightTitle": ""}