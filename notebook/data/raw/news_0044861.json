{"organizations": [], "uuid": "e6612d8bf034b0717df995be7f2171ab5dcbe923", "thread": {"social": {"gplus": {"shares": 13}, "pinterest": {"shares": 1}, "vk": {"shares": 0}, "linkedin": {"shares": 329}, "facebook": {"likes": 777, "shares": 777, "comments": 0}, "stumbledupon": {"shares": 0}}, "site_full": "medium.com", "main_image": "https://cdn-images-1.medium.com/max/1200/1*jmH6Eu_WPkTJ0ajzW_pZqA.png", "site_section": "", "section_title": "", "url": "https://medium.com/js-dojo/react-or-vue-which-javascript-ui-library-should-you-be-using-543a383608d", "country": "US", "domain_rank": 380, "title": "React or Vue: Which Javascript UI Library Should You Be Using?", "performance_score": 7, "site": "medium.com", "participants_count": 0, "title_full": "React or Vue: Which Javascript UI Library Should You Be Using?", "spam_score": 0.231, "site_type": "news", "published": "2017-02-22T03:17:00.000+02:00", "replies_count": 0, "uuid": "e6612d8bf034b0717df995be7f2171ab5dcbe923"}, "author": "Anthony Gore", "url": "https://medium.com/js-dojo/react-or-vue-which-javascript-ui-library-should-you-be-using-543a383608d", "ord_in_thread": 0, "title": "React or Vue: Which Javascript UI Library Should You Be Using?", "locations": [], "entities": {"persons": [], "locations": [], "organizations": []}, "highlightText": "", "language": "english", "persons": [], "text": "} ReactDOM.render(App, document.getElementById('app')); Templates are easier to understand for newer developers who’ve come from the standard web development paradigm. But even some experienced developers prefer them as templates can better seperate layout from functionality and give the option of using pre-processors like Pug. But templates come at the cost of having to learn all the extended HTML syntax, while render functions only require knowledge of standard HTML and Javascript. Render functions also benefit from easier debugging and testing. On this point, though, you can’t go wrong with Vue, as it’s introduced the option of using either templates or render functions in version 2. If you like simplicity and things that “just work”, go with Vue. A simple Vue project can be run directly from a browser with no need of transpilation. This allows Vue to be easily dropped into a project the way jQuery is. While this is also technically possible with React, typical React code leans more heavily on JSX and on ES6 features like classes and non-mutating array methods. But Vue’s simplicity runs more deeply in its design. Let’s compare how the two libraries handle application data (i.e. “state”). State in React is immutable so you can’t directly change it. You need to use the setState API method: this.setState({ message: this.state.message.split('').reverse().join('') }); Diff’ing the current and previous state is how React knows when and what to re-render in the DOM, hence the need for immutable state. In contrast, data is just mutated in Vue. The same data property can be altered far less verbosely in Vue: // Note that data properties are available as properties of // the Vue instance this.message = this.message.split('').reverse().join(''); Before you conclude that Vue’s rendering system must lack the efficiency of React’s, let’s examine how state in Vue is managed under the hood: when you add a new object to the state, Vue will walk through all of its properties and convert them to getter and setters. Vue’s reactivity system now keeps track of the state and will automatically re-render the DOM when it is mutated. Impressively, altering state in Vue is not only more succinct, but its re-rendering system is actually faster and more efficient than React’s. Vue’s reactivity system does have caveats, though. For example, it cannot detect property addition or deletion and certain array changes. These cases can be worked around with a React-like set method from the Vue API. If you need your application to be as small and fast as possible, go with Vue. Both React and Vue will build a virtual DOM and synchronise the real DOM when the app’s state changes. Both have their own means of optimising this process. Vue core developers have offered a benchmark test that shows Vue’s rendering system to be faster than React’s. In this test a list of 10,000 items are rendered 100 times. The comparison is tabled below. Benchmarks as published on vuejs.org From a pragmatic standpoint, this kind of benchmark is only relevant in edge cases. Most apps will not need to do this kind of operation routinely so it should generally not be considered an important point of comparison. Page size, though, is relevant to all projects, and again Vue has the upper hand. Minified, the current release of the Vue library is only 25.6KB. To get a similar set of functionality in React you need React DOM (37.4KB) and the React with Addons library (11.4KB), which totals 48.8KB, almost double the size of Vue. To be fair you will get a larger API with React, but you don’t get double as much functionality. If you plan to build a large scale app, go with React. A comparison of a simple app implemented in both Vue and React, like the one at the beginning of this article, may initially bias a developer to favour Vue. This is because template-based apps are easier to understand at first look, and quicker to get up and running with. But these initial benefits introduce technical debt that can slow development of apps reaching a larger scale. Templates are prone to unnoticed runtime errors, are hard to test, and are not easy to restructure or decompose. In contrast, Javascript-made templates can be organised into components with nicely decomposed and DRY code that is more reusable and testable. Vue also has a component system and render functions. But React’s rendering system is more configurable and has features like shallow rendering that, combined with React’s testing utilities, allow for far more testable and maintainable code. Meanwhile, React’s immutable application data may not be as succinct, but it shines in larger application when transparency and testability become critical. If you want a library that is adaptable for both web and native apps, go with React. React Native is a library for building native mobile applications with Javascript. It’s the same as React.js, only instead of using web components, it uses native components. If you’ve learnt React.js, you’ll very easily be able to pick up React Native, and vice versa. // JS import React, { Component } from 'react'; import { AppRegistry, Text, View } from 'react-native'; class HelloWorld extends Component { ", "external_links": [], "published": "2017-02-22T03:17:00.000+02:00", "crawled": "2017-02-21T22:39:49.898+02:00", "highlightTitle": ""}